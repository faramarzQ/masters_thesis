package consts

type SCALING_TYPE string
type NODE_CLASS string

var (
	SCALER_APPLICATION    = "scaler"
	SCHEDULER_APPLICATION = "scheduler"

	NODE_CLASS_LABEL_NAME            = "class"
	NODE_SCALED_AT_LABEL_NAME        = "scaled_at"
	WORKER_NODE_LABEL_NAME           = "worker"
	POD_WARM_LABEL_NAME              = "warm"
	POD_WARMED_AT_ANNOTATION_NAME    = "warmed_at"
	TERMINATED_POD_LABEL_NAME        = "terminated"
	NODE_IS_PRIMARY_LABEL_NAME       = "minikube.k8s.io/primary"
	ACTIVE_SCALER_LABEL_NAME         = "active_scaler"
	MAX_POWER_CONSUMPTION_LABEL_NAME = "max_power_consumption"
	MIN_POWER_CONSUMPTION_LABEL_NAME = "min_power_consumption"

	ACTIVE_CLASS NODE_CLASS = "active"
	IDLE_CLASS   NODE_CLASS = "idle"
	SLEEP_CLASS  NODE_CLASS = "sleep"
	OFF_CLASS    NODE_CLASS = "off"

	FUNCTIONING_CLASSES []NODE_CLASS = []NODE_CLASS{
		ACTIVE_CLASS,
		IDLE_CLASS,
		OFF_CLASS,
	}

	ENV_DEV_LOCAL    = "DEV_LOCAL"
	ENV_DEV_MINIKUBE = "DEV_MINIKUBE"
	ENV_PROD         = "PROD"

	// TODO: move to env vars
	IDLE_NODE_DURATION_MINUTES = 10

	RANDOM_SCALER    = "RandomScaler"
	HEURISTIC_SCALER = "HeuristicScaler"
	FIXED_SCALER     = "FixedScaler"
	SILENCER_SCALER  = "SilencerScaler"
	PROPOSED_SCALER  = "ProposedScaler"

	MAP_SCALER_ID_TO_NAME = map[uint]string{
		1: RANDOM_SCALER,
		2: FIXED_SCALER,
		3: HEURISTIC_SCALER,
		4: PROPOSED_SCALER,
		5: SILENCER_SCALER,
	}

	HEURISTIC_SCALER_UPPER_MEMORY_THRESHOLD = 70
	HEURISTIC_SCALER_DESIRED_MEMORY_UTIL    = 60
	// HEURISTIC_SCALER_UPPER_CPU_THRESHOLD    = 70
	// HEURISTIC_SCALER_DESIRED_CPU_UTIL       = 60

	RANDOM_SCHEDULER    = "RandomScheduler"
	HEURISTIC_SCHEDULER = "HeuristicScheduler"
	DEFAULT_SCHEDULER   = "DefaultScheduler"

	MAP_SCHEDULER_ID_TO_NAME = map[uint]string{
		1: RANDOM_SCHEDULER,
		2: HEURISTIC_SCHEDULER,
		3: DEFAULT_SCHEDULER,
	}

	PROMETHEUS_METRIC_NAME_SUCCESS_REQUESTS = "success_requests_total"
	PROMETHEUS_METRIC_NAME_TOTAL_REQUESTS   = "requests_total"
)
